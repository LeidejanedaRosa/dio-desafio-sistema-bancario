[
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BALANCE",
        "kind": 5,
        "importPath": "sistema_bancario_v1",
        "description": "sistema_bancario_v1",
        "peekOfCode": "BALANCE = 5000.0\nDAILY_LIMIT = 1500.0\nMAX_WITHDRAWALS = 3\nextract: list[dict] = []\nwhile True:\n    option = input(\n        \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n        \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Sair\\n\\n\"\n        \"Digite o número da opção desejada: \"\n    )",
        "detail": "sistema_bancario_v1",
        "documentation": {}
    },
    {
        "label": "DAILY_LIMIT",
        "kind": 5,
        "importPath": "sistema_bancario_v1",
        "description": "sistema_bancario_v1",
        "peekOfCode": "DAILY_LIMIT = 1500.0\nMAX_WITHDRAWALS = 3\nextract: list[dict] = []\nwhile True:\n    option = input(\n        \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n        \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Sair\\n\\n\"\n        \"Digite o número da opção desejada: \"\n    )\n    if option == \"1\":",
        "detail": "sistema_bancario_v1",
        "documentation": {}
    },
    {
        "label": "MAX_WITHDRAWALS",
        "kind": 5,
        "importPath": "sistema_bancario_v1",
        "description": "sistema_bancario_v1",
        "peekOfCode": "MAX_WITHDRAWALS = 3\nextract: list[dict] = []\nwhile True:\n    option = input(\n        \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n        \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Sair\\n\\n\"\n        \"Digite o número da opção desejada: \"\n    )\n    if option == \"1\":\n        value = float(input(\"Digite o valor do saque: R$ \"))",
        "detail": "sistema_bancario_v1",
        "documentation": {}
    },
    {
        "label": "validar_nome",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_nome(nome):\n    if not nome:\n        print(\"\\n\\n❌ O nome não pode ser vazio!\\n\\n\")\n        return False\n    return True\ndef validar_data_nascimento(data_nascimento):\n    if not data_nascimento:\n        print(\"\\n\\n❌ A data de nascimento é obrigatória!\\n\\n\")\n        return False\n    try:",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "validar_data_nascimento",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_data_nascimento(data_nascimento):\n    if not data_nascimento:\n        print(\"\\n\\n❌ A data de nascimento é obrigatória!\\n\\n\")\n        return False\n    try:\n        datetime.strptime(data_nascimento, \"%d/%m/%Y\")\n    except ValueError:\n        print(\n            \"\\n\\n❌ A data de nascimento deve estar no formato dd/mm/aaaa!\\n\\n\"\n        )  # noqa",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "validar_cpf",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_cpf(cpf):\n    if not cpf:\n        print(\"\\n\\n❌ O CPF não pode ser vazio!\\n\\n\")\n        return False\n    if cpf_existe(cpf):\n        print(\"\\n\\n❌ Usuário com este CPF já cadastrado!\\n\\n\")\n        return False\n    return True\ndef validar_endereco(endereco):\n    if not endereco:",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "validar_endereco",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_endereco(endereco):\n    if not endereco:\n        print(\"\\n\\n❌ O endereço não pode ser vazio!\\n\\n\")\n        return False\n    return True\ndef cpf_existe(cpf):\n    return any(usuario[\"cpf\"] == cpf for usuario in usuarios)\ndef obter_dado(campo, validacao):\n    while True:\n        dado = input(f\"Digite o {campo}: \").strip()",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "cpf_existe",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def cpf_existe(cpf):\n    return any(usuario[\"cpf\"] == cpf for usuario in usuarios)\ndef obter_dado(campo, validacao):\n    while True:\n        dado = input(f\"Digite o {campo}: \").strip()\n        if validacao(dado):\n            return dado\ndef verificar_limites_saque(\n    valor, saldo, limite, numero_saques, limite_saques, total_sacado_hoje\n):",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "obter_dado",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def obter_dado(campo, validacao):\n    while True:\n        dado = input(f\"Digite o {campo}: \").strip()\n        if validacao(dado):\n            return dado\ndef verificar_limites_saque(\n    valor, saldo, limite, numero_saques, limite_saques, total_sacado_hoje\n):\n    if numero_saques >= limite_saques:\n        print(\"\\n\\n❌ Limite de 3 saques diários atingido!\\n\\n\")",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "verificar_limites_saque",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def verificar_limites_saque(\n    valor, saldo, limite, numero_saques, limite_saques, total_sacado_hoje\n):\n    if numero_saques >= limite_saques:\n        print(\"\\n\\n❌ Limite de 3 saques diários atingido!\\n\\n\")\n        return False\n    elif valor > saldo:\n        print(\"\\n\\n❌ Saldo insuficiente!\\n\\n\")\n        return False\n    elif total_sacado_hoje + valor > limite:",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "obter_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def obter_conta():\n    agencia = input(\"Digite a agência: \").strip()\n    numero_conta = int(input(\"Digite o número da conta: \").strip())\n    tipo_conta = input(\"Digite o tipo da conta: \").strip()\n    conta = next(\n        (\n            c\n            for c in contas\n            if c[\"agencia\"] == agencia\n            and c[\"numero\"] == numero_conta",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "sacar",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def sacar(conta):\n    valor = float(input(\"Digite o valor do saque: R$ \"))\n    saldo = conta[\"saldo\"]\n    limite = LIMITE_DIARIO_PARA_SAQUE\n    numero_saques = len(\n        [t for t in extrato if t[\"tipo\"] == \"Saque\" and t[\"conta\"] == conta]\n    )\n    limite_saques = MAX_RETIRADAS\n    hoje = datetime.now().date()\n    retiradas_diarias = [",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "depositar",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def depositar(conta):\n    valor = float(input(\"Digite o valor do depósito: R$ \"))\n    conta[\"saldo\"] += valor\n    extrato.append(\n        {\n            \"tipo\": \"Depósito\",\n            \"valor\": valor,\n            \"data\": datetime.now().isoformat(),\n            \"conta\": conta,\n        }",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "mostrar_extrato",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def mostrar_extrato(conta):\n    print(\"\\n📜 Extrato Bancário 📜\\n\")\n    for transacao in extrato:\n        if transacao[\"conta\"] == conta:\n            formatted_date = datetime.fromisoformat(transacao[\"data\"]).strftime(  # noqa\n                \"%d/%m/%Y %H:%M:%S\"\n            )\n            print(\n                f\"{formatted_date} - {transacao['tipo']}: R$ {transacao['valor']:.2f}\"  # noqa\n            )",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "criar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def criar_usuario(cpf=None):\n    while True:\n        if not cpf:\n            cpf = (\n                input(\"Digite o CPF (somente números): \")\n                .replace(\".\", \"\")\n                .replace(\"-\", \"\")\n                .strip()\n            )\n        if not validar_cpf(cpf):",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "listar_usuarios",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def listar_usuarios():\n    if not usuarios:\n        print(\"\\n\\n📭 Nenhum usuário cadastrado!\\n\\n\")\n        return\n    print(\"\\n📋 Lista de Usuários 📋\\n\")\n    for usuario in usuarios:\n        print(f\"Nome: {usuario['nome']}\")\n        print(f\"Data de Nascimento: {usuario['data_nascimento']}\")\n        print(f\"CPF: {usuario['cpf']}\")\n        print(f\"Endereço: {usuario['endereco']}\")",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def editar_usuario():\n    cpf = (\n        input(\"Digite o CPF do usuário a ser editado (somente números): \")\n        .replace(\".\", \"\")\n        .replace(\"-\", \"\")\n        .strip()\n    )\n    usuario = next((u for u in usuarios if u[\"cpf\"] == cpf), None)\n    if not usuario:\n        print(\"\\n\\n❌ Usuário não encontrado!\\n\\n\")",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "criar_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def criar_conta(cpf):\n    global numero_conta_sequencial\n    usuario = next((u for u in usuarios if u[\"cpf\"] == cpf), None)\n    if not usuario:\n        print(\"\\n\\n❌ Usuário não encontrado!\\n\\n\")\n        return\n    tipos_conta_usuario = [\n        conta[\"tipo\"] for conta in contas if conta[\"usuario\"][\"cpf\"] == cpf\n    ]\n    tipos_disponiveis = [",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "listar_contas",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def listar_contas():\n    if not contas:\n        print(\"\\n\\n📭 Nenhuma conta cadastrada!\\n\\n\")\n        return\n    print(\"\\n📋 Lista de Contas 📋\\n\")\n    for conta in contas:\n        print(f\"Tipo: {conta['tipo']}\")\n        print(f\"Agência: {conta['agencia']}\")\n        print(f\"Número: {conta['numero']}\")\n        print(",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "encerrar_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def encerrar_conta():\n    agencia = input(\"Digite a agência: \").strip()\n    numero_conta = int(input(\"Digite o número da conta: \").strip())\n    tipo_conta = input(\"Digite o tipo da conta: \").strip()\n    conta = next(\n        (\n            c\n            for c in contas\n            if c[\"agencia\"] == agencia\n            and c[\"numero\"] == numero_conta",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "menu_principal",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def menu_principal():\n    while True:\n        option = input(\n            \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n            \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Criar Usuário\\n[5] - Editar Usuários\\n\"  # noqa\n            \"[6] - Listar Usuários\\n[7] - Criar Conta\\n[8] - Listar Contas\\n[9] - Encerrar Conta\\n[10] - Sair\\n\\n\"  # noqa\n            \"Digite o número da opção desejada: \"\n        )\n        if option == \"1\":\n            conta = obter_conta()",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "SALDO_INICIAL",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "SALDO_INICIAL = 5000.0\nLIMITE_DIARIO_PARA_SAQUE = 1500.0\nMAX_RETIRADAS = 3\nAGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "LIMITE_DIARIO_PARA_SAQUE",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "LIMITE_DIARIO_PARA_SAQUE = 1500.0\nMAX_RETIRADAS = 3\nAGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "MAX_RETIRADAS",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "MAX_RETIRADAS = 3\nAGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",\n    \"Conta Universitária\",",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "AGENCIA",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "AGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",\n    \"Conta Universitária\",\n]",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "TIPOS_DE_CONTA",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "TIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",\n    \"Conta Universitária\",\n]\nextrato: list[dict] = []",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "numero_conta_sequencial",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "numero_conta_sequencial = 1\ndef validar_nome(nome):\n    if not nome:\n        print(\"\\n\\n❌ O nome não pode ser vazio!\\n\\n\")\n        return False\n    return True\ndef validar_data_nascimento(data_nascimento):\n    if not data_nascimento:\n        print(\"\\n\\n❌ A data de nascimento é obrigatória!\\n\\n\")\n        return False",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    }
]