[
    {
        "label": "validar_documento",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_numero_conta",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_data",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_documento",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_endereco",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_nome",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_data",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_documento",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_documento",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_nome",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_data",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "validar_endereco",
        "importPath": "src.validators",
        "description": "src.validators",
        "isExtraImport": true,
        "detail": "src.validators",
        "documentation": {}
    },
    {
        "label": "atualizar_usuario",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "encontrar_usuario",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "exibir_dados_usuario",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "obter_documento",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "obter_novos_dados",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "encontrar_usuario",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "documento_existe",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "documento_existe",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "encontrar_usuario",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "exibir_dados_usuario",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Historico",
        "importPath": "src.transacao",
        "description": "src.transacao",
        "isExtraImport": true,
        "detail": "src.transacao",
        "documentation": {}
    },
    {
        "label": "Deposito",
        "importPath": "src.transacao",
        "description": "src.transacao",
        "isExtraImport": true,
        "detail": "src.transacao",
        "documentation": {}
    },
    {
        "label": "Deposito",
        "importPath": "src.transacao",
        "description": "src.transacao",
        "isExtraImport": true,
        "detail": "src.transacao",
        "documentation": {}
    },
    {
        "label": "Saque",
        "importPath": "src.transacao",
        "description": "src.transacao",
        "isExtraImport": true,
        "detail": "src.transacao",
        "documentation": {}
    },
    {
        "label": "Deposito",
        "importPath": "src.transacao",
        "description": "src.transacao",
        "isExtraImport": true,
        "detail": "src.transacao",
        "documentation": {}
    },
    {
        "label": "Saque",
        "importPath": "src.transacao",
        "description": "src.transacao",
        "isExtraImport": true,
        "detail": "src.transacao",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "src.cliente",
        "description": "src.cliente",
        "isExtraImport": true,
        "detail": "src.cliente",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "src.cliente",
        "description": "src.cliente",
        "isExtraImport": true,
        "detail": "src.cliente",
        "documentation": {}
    },
    {
        "label": "PessoaFisica",
        "importPath": "src.cliente",
        "description": "src.cliente",
        "isExtraImport": true,
        "detail": "src.cliente",
        "documentation": {}
    },
    {
        "label": "PessoaJuridica",
        "importPath": "src.cliente",
        "description": "src.cliente",
        "isExtraImport": true,
        "detail": "src.cliente",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "src.cliente",
        "description": "src.cliente",
        "isExtraImport": true,
        "detail": "src.cliente",
        "documentation": {}
    },
    {
        "label": "PessoaFisica",
        "importPath": "src.cliente",
        "description": "src.cliente",
        "isExtraImport": true,
        "detail": "src.cliente",
        "documentation": {}
    },
    {
        "label": "PessoaJuridica",
        "importPath": "src.cliente",
        "description": "src.cliente",
        "isExtraImport": true,
        "detail": "src.cliente",
        "documentation": {}
    },
    {
        "label": "Conta",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "Conta",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "Conta",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "Conta",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaCorrente",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaPoupanca",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaUniversitaria",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaSalario",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaConjunta",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaMenorIdade",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaCorrente",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaPoupanca",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "Conta",
        "importPath": "src.conta",
        "description": "src.conta",
        "isExtraImport": true,
        "detail": "src.conta",
        "documentation": {}
    },
    {
        "label": "ContaConjunta",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaCorrente",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaCorrente",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaPoupanca",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaMenorIdade",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaPoupanca",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaSalario",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaUniversitaria",
        "importPath": "src.tipo_conta",
        "description": "src.tipo_conta",
        "isExtraImport": true,
        "detail": "src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaFactory",
        "importPath": "src.conta_factory",
        "description": "src.conta_factory",
        "isExtraImport": true,
        "detail": "src.conta_factory",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.cliente",
        "description": "sistema_bancario_v3.src.cliente",
        "peekOfCode": "class Cliente:\n    clientes: list[dict] = [\n        {\n            \"cpf\": \"12345678911\",\n            \"nome\": \"Maria Alice Nascimento da Rosa\",\n            \"endereco\": \"Via Silvestre Ferraz, 175 - Carioca - São Lourenço/MG\",\n            \"data_nascimento\": \"17/08/2018\",\n        },\n        {\n            \"cpf\": \"08062655741\",",
        "detail": "sistema_bancario_v3.src.cliente",
        "documentation": {}
    },
    {
        "label": "PessoaFisica",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.cliente",
        "description": "sistema_bancario_v3.src.cliente",
        "peekOfCode": "class PessoaFisica(Cliente):\n    def __init__(self, cpf, nome, data_nascimento, endereco):\n        super().__init__(endereco)\n        self._cpf = cpf\n        self._nome = nome\n        self._data_nascimento = data_nascimento\n        Cliente.clientes.append(\n            {\n                \"cpf\": cpf,\n                \"nome\": nome,",
        "detail": "sistema_bancario_v3.src.cliente",
        "documentation": {}
    },
    {
        "label": "PessoaJuridica",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.cliente",
        "description": "sistema_bancario_v3.src.cliente",
        "peekOfCode": "class PessoaJuridica(Cliente):\n    def __init__(self, cnpj, nome, data_abertura, endereco):\n        super().__init__(endereco)\n        self._cnpj = cnpj\n        self._nome = nome\n        self._data_abertura = data_abertura\n        Cliente.clientes.append(\n            {\n                \"cnpj\": cnpj,\n                \"nome\": nome,",
        "detail": "sistema_bancario_v3.src.cliente",
        "documentation": {}
    },
    {
        "label": "Conta",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.conta",
        "description": "sistema_bancario_v3.src.conta",
        "peekOfCode": "class Conta(ABC):\n    ultima_conta_criada = \"000\"\n    contas: List[\"Conta\"] = []\n    def __init__(\n        self,\n        cliente,\n        numero_conta,\n        agencia=\"0001\",\n        historico=None,\n        co_titular=None,",
        "detail": "sistema_bancario_v3.src.conta",
        "documentation": {}
    },
    {
        "label": "ContaFactory",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.conta_factory",
        "description": "sistema_bancario_v3.src.conta_factory",
        "peekOfCode": "class ContaFactory:\n    @staticmethod\n    def _cadastrar_senha():\n        while True:\n            senha = input(\"🔐 Defina uma senha para a conta: \")\n            if len(senha) < 6:\n                print(\"❌ A senha deve ter pelo menos 6 caracteres.\")\n                continue\n            confirmar = input(\"🔁 Confirme sua senha: \")\n            if senha != confirmar:",
        "detail": "sistema_bancario_v3.src.conta_factory",
        "documentation": {}
    },
    {
        "label": "menu_principal",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.main",
        "description": "sistema_bancario_v3.src.main",
        "peekOfCode": "def menu_principal():\n    usuarios = Cliente.clientes\n    while True:\n        option = input(\n            \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n            \"[0] - Saldo\\n[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Criar Usuário\\n[5] - Editar Usuários\\n\"  # noqa\n            \"[6] - Listar Usuários\\n[7] - Excluir Usuário\\n[8] - Criar Conta\\n[9] - Listar Contas\\n[10] - Encerrar Conta\\n[11] - Sair\\n\\n\"  # noqa\n            \"Digite o número da opção desejada: \"\n        )\n        if option == \"0\":",
        "detail": "sistema_bancario_v3.src.main",
        "documentation": {}
    },
    {
        "label": "solicitar_senha",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.main",
        "description": "sistema_bancario_v3.src.main",
        "peekOfCode": "def solicitar_senha(conta):\n    senha = input(\"Digite a senha da conta: \")\n    if conta.validar_senha(conta, senha):\n        return True\n    else:\n        print(\"\\n❌ Senha incorreta! Tente novamente.\\n\")\n        return False\ndef exibir_saldo():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):",
        "detail": "sistema_bancario_v3.src.main",
        "documentation": {}
    },
    {
        "label": "exibir_saldo",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.main",
        "description": "sistema_bancario_v3.src.main",
        "peekOfCode": "def exibir_saldo():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):\n        conta.exibir_saldo()\ndef realizar_saque():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):\n        valor = float(input(\"Digite o valor do saque: R$ \"))\n        transacao = Saque(valor)\n        transacao.registrar(conta)",
        "detail": "sistema_bancario_v3.src.main",
        "documentation": {}
    },
    {
        "label": "realizar_saque",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.main",
        "description": "sistema_bancario_v3.src.main",
        "peekOfCode": "def realizar_saque():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):\n        valor = float(input(\"Digite o valor do saque: R$ \"))\n        transacao = Saque(valor)\n        transacao.registrar(conta)\ndef realizar_deposito():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):\n        valor = float(input(\"Digite o valor do depósito: R$ \"))",
        "detail": "sistema_bancario_v3.src.main",
        "documentation": {}
    },
    {
        "label": "realizar_deposito",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.main",
        "description": "sistema_bancario_v3.src.main",
        "peekOfCode": "def realizar_deposito():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):\n        valor = float(input(\"Digite o valor do depósito: R$ \"))\n        transacao = Deposito(valor)\n        transacao.registrar(conta)\ndef exibir_extrato():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):\n        conta.exibir_extrato()",
        "detail": "sistema_bancario_v3.src.main",
        "documentation": {}
    },
    {
        "label": "exibir_extrato",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.main",
        "description": "sistema_bancario_v3.src.main",
        "peekOfCode": "def exibir_extrato():\n    conta = Conta.obter_conta()\n    if conta and solicitar_senha(conta):\n        conta.exibir_extrato()\ndef criar_usuario(usuarios):\n    while True:\n        documento = input(\"Digite o CPF ou CNPJ do usuário: \")\n        valido, mensagem = validar_documento(documento)\n        if not valido:\n            print(f\"\\n{mensagem}\\n\")",
        "detail": "sistema_bancario_v3.src.main",
        "documentation": {}
    },
    {
        "label": "criar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.main",
        "description": "sistema_bancario_v3.src.main",
        "peekOfCode": "def criar_usuario(usuarios):\n    while True:\n        documento = input(\"Digite o CPF ou CNPJ do usuário: \")\n        valido, mensagem = validar_documento(documento)\n        if not valido:\n            print(f\"\\n{mensagem}\\n\")\n            continue\n        break\n    if documento_existe(documento, usuarios):\n        if len(documento) == 11:",
        "detail": "sistema_bancario_v3.src.main",
        "documentation": {}
    },
    {
        "label": "ContaCorrente",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaCorrente(Conta):\n    def __init__(\n        self,\n        cliente,\n        numero_conta,\n        agencia=\"0001\",\n        limite=1500,\n        limite_saques=3,\n        senha=None,\n    ):",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaPoupanca",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaPoupanca(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", senha=None):\n        super().__init__(cliente, numero_conta, agencia)\n        self._senha = senha\n    def deposito_inicial(self):\n        return 50\n    def get_senha(self, autorizado=False):\n        if autorizado:\n            return self._senha\n        return \"Acesso negado\"",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaUniversitaria",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaUniversitaria(Conta):\n    def __init__(\n        self, cliente, numero_conta, agencia=\"0001\", limite=500, senha=None\n    ):  # noqa\n        super().__init__(cliente, numero_conta, agencia, limite=limite)\n        self._senha = senha\n    def deposito_inicial(self):\n        return 20\n    def get_senha(self, autorizado=False):\n        if autorizado:",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaSalario",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaSalario(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", senha=None):\n        super().__init__(cliente, numero_conta, agencia)\n        self._senha = senha\n    def deposito_inicial(self):\n        return 0\n    def get_senha(self, autorizado=False):\n        if autorizado:\n            return self._senha\n        return \"Acesso negado\"",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaConjunta",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaConjunta(Conta):\n    def __init__(\n        self, cliente, numero_conta, agencia=\"0001\", co_titular=None, senha=None  # noqa\n    ):\n        super().__init__(cliente, numero_conta, agencia, co_titular=co_titular)\n        self._co_titular = co_titular\n        self._senha = senha\n    def deposito_inicial(self):\n        return 100\n    @property",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaMenorIdade",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaMenorIdade(Conta):\n    def __init__(\n        self,\n        cliente,\n        numero_conta,\n        agencia=\"0001\",\n        responsavel=None,\n        senha=None,  # noqa\n    ):\n        super().__init__(cliente, numero_conta, agencia)",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaCorrente",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaJuridicaCorrente(Conta):\n    def __init__(\n        self, cliente, numero_conta, agencia=\"0001\", limite=1000, senha=None\n    ):  # noqa\n        super().__init__(cliente, numero_conta, agencia, limite=limite)\n        self._senha = senha\n    def deposito_inicial(self):\n        return 200\n    def get_senha(self, autorizado=False):\n        if autorizado:",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaPoupanca",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.tipo_conta",
        "description": "sistema_bancario_v3.src.tipo_conta",
        "peekOfCode": "class ContaJuridicaPoupanca(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", senha=None):\n        super().__init__(cliente, numero_conta, agencia)\n        self._senha = senha\n    def deposito_inicial(self):\n        return 150\n    def get_senha(self, autorizado=False):\n        if autorizado:\n            return self._senha\n        return \"Acesso negado\"",
        "detail": "sistema_bancario_v3.src.tipo_conta",
        "documentation": {}
    },
    {
        "label": "Transacao",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.transacao",
        "description": "sistema_bancario_v3.src.transacao",
        "peekOfCode": "class Transacao(ABC):\n    @abstractmethod\n    def registrar(self, conta):\n        pass\nclass Historico:\n    def __init__(self):\n        self.transacoes = []\n    def adicionar_transacao(self, transacao):\n        self.transacoes.append(transacao)\nclass Deposito(Transacao):",
        "detail": "sistema_bancario_v3.src.transacao",
        "documentation": {}
    },
    {
        "label": "Historico",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.transacao",
        "description": "sistema_bancario_v3.src.transacao",
        "peekOfCode": "class Historico:\n    def __init__(self):\n        self.transacoes = []\n    def adicionar_transacao(self, transacao):\n        self.transacoes.append(transacao)\nclass Deposito(Transacao):\n    def __init__(self, valor):\n        self.valor = valor\n    def registrar(self, conta):\n        if conta.depositar(self.valor):",
        "detail": "sistema_bancario_v3.src.transacao",
        "documentation": {}
    },
    {
        "label": "Deposito",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.transacao",
        "description": "sistema_bancario_v3.src.transacao",
        "peekOfCode": "class Deposito(Transacao):\n    def __init__(self, valor):\n        self.valor = valor\n    def registrar(self, conta):\n        if conta.depositar(self.valor):\n            data_hora = datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n            conta._historico.adicionar_transacao(\n                f\"{data_hora} + R$ {self.valor:.2f}\"\n            )  # noqa\nclass Saque(Transacao):",
        "detail": "sistema_bancario_v3.src.transacao",
        "documentation": {}
    },
    {
        "label": "Saque",
        "kind": 6,
        "importPath": "sistema_bancario_v3.src.transacao",
        "description": "sistema_bancario_v3.src.transacao",
        "peekOfCode": "class Saque(Transacao):\n    def __init__(self, valor):\n        self.valor = valor\n    def registrar(self, conta):\n        if conta.sacar(self.valor):\n            data_hora = datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n            conta._historico.adicionar_transacao(f\"{data_hora} - R$ {self.valor:.2f}\")",
        "detail": "sistema_bancario_v3.src.transacao",
        "documentation": {}
    },
    {
        "label": "documento_existe",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.utils",
        "description": "sistema_bancario_v3.src.utils",
        "peekOfCode": "def documento_existe(documento, clientes):\n    return any(\n        cliente.get(\"cpf\") == documento or cliente.get(\"cnpj\") == documento\n        for cliente in clientes\n    )\ndef obter_documento(eEdicao=False):\n    label = \"editado\" if eEdicao else \"excluído\"\n    documento = input(\n        f\"Digite o CPF ou CNPJ do usuário a ser {label} (somente números): \"\n    )",
        "detail": "sistema_bancario_v3.src.utils",
        "documentation": {}
    },
    {
        "label": "obter_documento",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.utils",
        "description": "sistema_bancario_v3.src.utils",
        "peekOfCode": "def obter_documento(eEdicao=False):\n    label = \"editado\" if eEdicao else \"excluído\"\n    documento = input(\n        f\"Digite o CPF ou CNPJ do usuário a ser {label} (somente números): \"\n    )\n    return documento.replace(\".\", \"\").replace(\"-\", \"\").strip()\ndef obter_novos_dados(usuario):\n    print(\n        \"Digite os novos dados do usuário (deixe em branco para manter o valor atual):\"  # noqa\n    )",
        "detail": "sistema_bancario_v3.src.utils",
        "documentation": {}
    },
    {
        "label": "obter_novos_dados",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.utils",
        "description": "sistema_bancario_v3.src.utils",
        "peekOfCode": "def obter_novos_dados(usuario):\n    print(\n        \"Digite os novos dados do usuário (deixe em branco para manter o valor atual):\"  # noqa\n    )\n    novo_nome = input(f\"Nome [{usuario['nome']}]: \").strip()\n    data_label = (\n        \"Data de Nascimento\" if \"cpf\" in usuario else \"Data de Abertura\"\n    )  # noqa\n    nova_data = input(\n        f\"{data_label} [{usuario.get('data_nascimento', usuario.get('data_abertura'))}]: \"  # noqa",
        "detail": "sistema_bancario_v3.src.utils",
        "documentation": {}
    },
    {
        "label": "encontrar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.utils",
        "description": "sistema_bancario_v3.src.utils",
        "peekOfCode": "def encontrar_usuario(usuarios, documento):\n    return next(\n        (\n            u\n            for u in usuarios\n            if isinstance(u, dict)\n            and (\n                (\"cpf\" in u and u[\"cpf\"] == documento)\n                or (\"cnpj\" in u and u[\"cnpj\"] == documento)\n            )",
        "detail": "sistema_bancario_v3.src.utils",
        "documentation": {}
    },
    {
        "label": "exibir_dados_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.utils",
        "description": "sistema_bancario_v3.src.utils",
        "peekOfCode": "def exibir_dados_usuario(usuario):\n    print(\"\\n📋 Dados Atuais do Usuário 📋\\n\")\n    print(f\"Nome: {usuario['nome']}\")\n    if \"cpf\" in usuario:\n        print(f\"Data de Nascimento: {usuario['data_nascimento']}\")\n        print(f\"CPF: {usuario['cpf']}\")\n    else:\n        print(f\"Data de Abertura: {usuario['data_abertura']}\")\n        print(f\"CNPJ: {usuario['cnpj']}\")\n    print(f\"Endereço: {usuario['endereco']}\\n\")",
        "detail": "sistema_bancario_v3.src.utils",
        "documentation": {}
    },
    {
        "label": "atualizar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.utils",
        "description": "sistema_bancario_v3.src.utils",
        "peekOfCode": "def atualizar_usuario(usuario, novo_nome, nova_data, novo_endereco):\n    if novo_nome:\n        usuario[\"nome\"] = novo_nome\n    if nova_data:\n        if \"cpf\" in usuario:\n            usuario[\"data_nascimento\"] = nova_data\n        else:\n            usuario[\"data_abertura\"] = nova_data\n    if novo_endereco:\n        usuario[\"endereco\"] = novo_endereco",
        "detail": "sistema_bancario_v3.src.utils",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.utils",
        "description": "sistema_bancario_v3.src.utils",
        "peekOfCode": "def editar_usuario(usuarios):\n    documento = obter_documento()\n    valido, mensagem = validar_documento(documento)\n    if not valido:\n        print(f\"\\n{mensagem}\\n\")\n        return\n    usuario = encontrar_usuario(usuarios, documento)\n    if not usuario:\n        print(\"\\n\\n❌ Usuário não encontrado!\\n\\n\")\n        return",
        "detail": "sistema_bancario_v3.src.utils",
        "documentation": {}
    },
    {
        "label": "validar_documento",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.validators",
        "description": "sistema_bancario_v3.src.validators",
        "peekOfCode": "def validar_documento(documento):\n    if not documento:\n        return False, \"❌ Documento é obrigatório.\"\n    if len(documento) == 11 or len(documento) == 14:\n        return True, \"\"\n    else:\n        return (\n            False,\n            \"❌ Documento inválido. Deve conter 11 (CPF) ou 14 (CNPJ) dígitos.\",\n        )",
        "detail": "sistema_bancario_v3.src.validators",
        "documentation": {}
    },
    {
        "label": "validar_nome",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.validators",
        "description": "sistema_bancario_v3.src.validators",
        "peekOfCode": "def validar_nome(nome):\n    if not nome:\n        return False, \"❌ Nome não pode ser vazio.\"\n    return True, \"\"\ndef validar_data(data, eEdicao=False):\n    if eEdicao and not data:\n        return True, \"\"\n    elif not data:\n        return False, \"❌ Data é obrigatória.\"\n    try:",
        "detail": "sistema_bancario_v3.src.validators",
        "documentation": {}
    },
    {
        "label": "validar_data",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.validators",
        "description": "sistema_bancario_v3.src.validators",
        "peekOfCode": "def validar_data(data, eEdicao=False):\n    if eEdicao and not data:\n        return True, \"\"\n    elif not data:\n        return False, \"❌ Data é obrigatória.\"\n    try:\n        data_nascimento = datetime.strptime(data, \"%d/%m/%Y\")\n        data_atual = datetime.today()\n        # Verifica se a data informada é no futuro\n        if data_nascimento > data_atual:",
        "detail": "sistema_bancario_v3.src.validators",
        "documentation": {}
    },
    {
        "label": "validar_endereco",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.validators",
        "description": "sistema_bancario_v3.src.validators",
        "peekOfCode": "def validar_endereco(endereco):\n    if not endereco:\n        return False, \"❌ Endereço não pode ser vazio.\"\n    return True, \"\"\ndef validar_numero_conta(numero):\n    if not re.match(r\"^\\d{3}/\\d$\", numero):\n        return False, \"❌ Número da conta deve estar no formato XXX/X.\"\n    return True, \"\"",
        "detail": "sistema_bancario_v3.src.validators",
        "documentation": {}
    },
    {
        "label": "validar_numero_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v3.src.validators",
        "description": "sistema_bancario_v3.src.validators",
        "peekOfCode": "def validar_numero_conta(numero):\n    if not re.match(r\"^\\d{3}/\\d$\", numero):\n        return False, \"❌ Número da conta deve estar no formato XXX/X.\"\n    return True, \"\"",
        "detail": "sistema_bancario_v3.src.validators",
        "documentation": {}
    },
    {
        "label": "test_cliente_creation",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_cliente",
        "description": "sistema_bancario_v3.tests.test_cliente",
        "peekOfCode": "def test_cliente_creation():\n    # Test creation of a PessoaFisica\n    pf = PessoaFisica(cpf=\"12345678901\", nome=\"João Silva\", data_nascimento=\"01/01/1990\", endereco=\"Rua A, 123\")\n    assert pf._cpf == \"12345678901\"\n    assert pf._nome == \"João Silva\"\n    assert pf._data_nascimento == \"01/01/1990\"\n    assert pf._endereco == \"Rua A, 123\"\n    assert len(Cliente.clientes) == 1  # Ensure the client is added to the list\n    # Test creation of a PessoaJuridica\n    pj = PessoaJuridica(cnpj=\"12345678000195\", nome=\"Empresa XYZ\", data_abertura=\"01/01/2020\", endereco=\"Avenida B, 456\")",
        "detail": "sistema_bancario_v3.tests.test_cliente",
        "documentation": {}
    },
    {
        "label": "test_cliente_editing",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_cliente",
        "description": "sistema_bancario_v3.tests.test_cliente",
        "peekOfCode": "def test_cliente_editing():\n    pf = PessoaFisica(cpf=\"12345678901\", nome=\"João Silva\", data_nascimento=\"01/01/1990\", endereco=\"Rua A, 123\")\n    pf._nome = \"João da Silva\"\n    pf._endereco = \"Rua A, 456\"\n    assert pf._nome == \"João da Silva\"\n    assert pf._endereco == \"Rua A, 456\"\ndef test_cliente_listing():\n    Cliente.clientes.clear()  # Clear existing clients for testing\n    pf1 = PessoaFisica(cpf=\"12345678901\", nome=\"João Silva\", data_nascimento=\"01/01/1990\", endereco=\"Rua A, 123\")\n    pf2 = PessoaFisica(cpf=\"10987654321\", nome=\"Maria Oliveira\", data_nascimento=\"02/02/1992\", endereco=\"Rua B, 456\")",
        "detail": "sistema_bancario_v3.tests.test_cliente",
        "documentation": {}
    },
    {
        "label": "test_cliente_listing",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_cliente",
        "description": "sistema_bancario_v3.tests.test_cliente",
        "peekOfCode": "def test_cliente_listing():\n    Cliente.clientes.clear()  # Clear existing clients for testing\n    pf1 = PessoaFisica(cpf=\"12345678901\", nome=\"João Silva\", data_nascimento=\"01/01/1990\", endereco=\"Rua A, 123\")\n    pf2 = PessoaFisica(cpf=\"10987654321\", nome=\"Maria Oliveira\", data_nascimento=\"02/02/1992\", endereco=\"Rua B, 456\")\n    assert len(Cliente.clientes) == 2  # Ensure both clients are listed\ndef test_cliente_not_found():\n    Cliente.clientes.clear()  # Clear existing clients for testing\n    pf = PessoaFisica(cpf=\"12345678901\", nome=\"João Silva\", data_nascimento=\"01/01/1990\", endereco=\"Rua A, 123\")\n    assert pf not in Cliente.clientes  # Ensure the client is not found in an empty list",
        "detail": "sistema_bancario_v3.tests.test_cliente",
        "documentation": {}
    },
    {
        "label": "test_cliente_not_found",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_cliente",
        "description": "sistema_bancario_v3.tests.test_cliente",
        "peekOfCode": "def test_cliente_not_found():\n    Cliente.clientes.clear()  # Clear existing clients for testing\n    pf = PessoaFisica(cpf=\"12345678901\", nome=\"João Silva\", data_nascimento=\"01/01/1990\", endereco=\"Rua A, 123\")\n    assert pf not in Cliente.clientes  # Ensure the client is not found in an empty list",
        "detail": "sistema_bancario_v3.tests.test_cliente",
        "documentation": {}
    },
    {
        "label": "test_depositar",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_conta",
        "description": "sistema_bancario_v3.tests.test_conta",
        "peekOfCode": "def test_depositar():\n    conta = ContaCorrente(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"001/1\")\n    conta.depositar(100)\n    assert conta.saldo == 100\ndef test_sacar():\n    conta = ContaPoupanca(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"002/2\")\n    conta.depositar(100)\n    conta.sacar(50)\n    assert conta.saldo == 50\ndef test_sacar_saldo_insuficiente():",
        "detail": "sistema_bancario_v3.tests.test_conta",
        "documentation": {}
    },
    {
        "label": "test_sacar",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_conta",
        "description": "sistema_bancario_v3.tests.test_conta",
        "peekOfCode": "def test_sacar():\n    conta = ContaPoupanca(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"002/2\")\n    conta.depositar(100)\n    conta.sacar(50)\n    assert conta.saldo == 50\ndef test_sacar_saldo_insuficiente():\n    conta = ContaUniversitaria(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"003/3\")\n    conta.depositar(30)\n    resultado = conta.sacar(50)\n    assert resultado is False",
        "detail": "sistema_bancario_v3.tests.test_conta",
        "documentation": {}
    },
    {
        "label": "test_sacar_saldo_insuficiente",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_conta",
        "description": "sistema_bancario_v3.tests.test_conta",
        "peekOfCode": "def test_sacar_saldo_insuficiente():\n    conta = ContaUniversitaria(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"003/3\")\n    conta.depositar(30)\n    resultado = conta.sacar(50)\n    assert resultado is False\n    assert conta.saldo == 30\ndef test_exibir_extrato():\n    conta = ContaSalario(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"004/4\")\n    conta.depositar(200)\n    conta.sacar(100)",
        "detail": "sistema_bancario_v3.tests.test_conta",
        "documentation": {}
    },
    {
        "label": "test_exibir_extrato",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_conta",
        "description": "sistema_bancario_v3.tests.test_conta",
        "peekOfCode": "def test_exibir_extrato():\n    conta = ContaSalario(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"004/4\")\n    conta.depositar(200)\n    conta.sacar(100)\n    extrato = conta.exibir_extrato()\n    assert \"Extrato de Transações\" in extrato\n    assert \"R$ 200.00\" in extrato\n    assert \"R$ 100.00\" in extrato\ndef test_encerrar_conta():\n    conta = ContaConjunta(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"005/5\")",
        "detail": "sistema_bancario_v3.tests.test_conta",
        "documentation": {}
    },
    {
        "label": "test_encerrar_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_conta",
        "description": "sistema_bancario_v3.tests.test_conta",
        "peekOfCode": "def test_encerrar_conta():\n    conta = ContaConjunta(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"005/5\")\n    conta.encerrar_conta()\n    assert conta.data_encerramento is not None\ndef test_criar_conta_juridica():\n    conta = ContaJuridicaCorrente(cliente={\"nome\": \"Test Company\", \"cnpj\": \"12345678000195\"}, numero_conta=\"006/6\")\n    conta.depositar(500)\n    assert conta.saldo == 500\ndef test_criar_conta_juridica_poupanca():\n    conta = ContaJuridicaPoupanca(cliente={\"nome\": \"Test Company\", \"cnpj\": \"12345678000195\"}, numero_conta=\"007/7\")",
        "detail": "sistema_bancario_v3.tests.test_conta",
        "documentation": {}
    },
    {
        "label": "test_criar_conta_juridica",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_conta",
        "description": "sistema_bancario_v3.tests.test_conta",
        "peekOfCode": "def test_criar_conta_juridica():\n    conta = ContaJuridicaCorrente(cliente={\"nome\": \"Test Company\", \"cnpj\": \"12345678000195\"}, numero_conta=\"006/6\")\n    conta.depositar(500)\n    assert conta.saldo == 500\ndef test_criar_conta_juridica_poupanca():\n    conta = ContaJuridicaPoupanca(cliente={\"nome\": \"Test Company\", \"cnpj\": \"12345678000195\"}, numero_conta=\"007/7\")\n    conta.depositar(300)\n    assert conta.saldo == 300",
        "detail": "sistema_bancario_v3.tests.test_conta",
        "documentation": {}
    },
    {
        "label": "test_criar_conta_juridica_poupanca",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_conta",
        "description": "sistema_bancario_v3.tests.test_conta",
        "peekOfCode": "def test_criar_conta_juridica_poupanca():\n    conta = ContaJuridicaPoupanca(cliente={\"nome\": \"Test Company\", \"cnpj\": \"12345678000195\"}, numero_conta=\"007/7\")\n    conta.depositar(300)\n    assert conta.saldo == 300",
        "detail": "sistema_bancario_v3.tests.test_conta",
        "documentation": {}
    },
    {
        "label": "conta",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_transacao",
        "description": "sistema_bancario_v3.tests.test_transacao",
        "peekOfCode": "def conta():\n    return Conta(cliente={\"nome\": \"Test User\", \"cpf\": \"12345678901\"}, numero_conta=\"001/1\")\ndef test_deposito_registrar(conta):\n    deposito = Deposito(100)\n    deposito.registrar(conta)\n    assert conta.saldo == 100\n    assert len(conta.historico.transacoes) == 1\n    assert \" + R$ 100.00\" in conta.historico.transacoes[0]\ndef test_saque_registrar(conta):\n    deposito = Deposito(200)",
        "detail": "sistema_bancario_v3.tests.test_transacao",
        "documentation": {}
    },
    {
        "label": "test_deposito_registrar",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_transacao",
        "description": "sistema_bancario_v3.tests.test_transacao",
        "peekOfCode": "def test_deposito_registrar(conta):\n    deposito = Deposito(100)\n    deposito.registrar(conta)\n    assert conta.saldo == 100\n    assert len(conta.historico.transacoes) == 1\n    assert \" + R$ 100.00\" in conta.historico.transacoes[0]\ndef test_saque_registrar(conta):\n    deposito = Deposito(200)\n    deposito.registrar(conta)\n    saque = Saque(100)",
        "detail": "sistema_bancario_v3.tests.test_transacao",
        "documentation": {}
    },
    {
        "label": "test_saque_registrar",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_transacao",
        "description": "sistema_bancario_v3.tests.test_transacao",
        "peekOfCode": "def test_saque_registrar(conta):\n    deposito = Deposito(200)\n    deposito.registrar(conta)\n    saque = Saque(100)\n    saque.registrar(conta)\n    assert conta.saldo == 100\n    assert len(conta.historico.transacoes) == 2\n    assert \" - R$ 100.00\" in conta.historico.transacoes[1]\ndef test_saque_insuficiente(conta):\n    saque = Saque(100)",
        "detail": "sistema_bancario_v3.tests.test_transacao",
        "documentation": {}
    },
    {
        "label": "test_saque_insuficiente",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_transacao",
        "description": "sistema_bancario_v3.tests.test_transacao",
        "peekOfCode": "def test_saque_insuficiente(conta):\n    saque = Saque(100)\n    saque.registrar(conta)\n    assert conta.saldo == 0\n    assert len(conta.historico.transacoes) == 0  # No transaction should be recorded\ndef test_deposito_negativo(conta):\n    deposito = Deposito(-50)\n    deposito.registrar(conta)\n    assert conta.saldo == 0\n    assert len(conta.historico.transacoes) == 0  # No transaction should be recorded",
        "detail": "sistema_bancario_v3.tests.test_transacao",
        "documentation": {}
    },
    {
        "label": "test_deposito_negativo",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_transacao",
        "description": "sistema_bancario_v3.tests.test_transacao",
        "peekOfCode": "def test_deposito_negativo(conta):\n    deposito = Deposito(-50)\n    deposito.registrar(conta)\n    assert conta.saldo == 0\n    assert len(conta.historico.transacoes) == 0  # No transaction should be recorded",
        "detail": "sistema_bancario_v3.tests.test_transacao",
        "documentation": {}
    },
    {
        "label": "TestUtils",
        "kind": 6,
        "importPath": "sistema_bancario_v3.tests.test_utils",
        "description": "sistema_bancario_v3.tests.test_utils",
        "peekOfCode": "class TestUtils(unittest.TestCase):\n    def setUp(self):\n        self.clientes = [\n            {\"cpf\": \"12345678901\", \"nome\": \"Cliente A\", \"endereco\": \"Endereço A\"},\n            {\"cnpj\": \"12345678000195\", \"nome\": \"Cliente B\", \"endereco\": \"Endereço B\"},\n        ]\n    def test_documento_existe_cpf(self):\n        self.assertTrue(documento_existe(\"12345678901\", self.clientes))\n    def test_documento_existe_cnpj(self):\n        self.assertTrue(documento_existe(\"12345678000195\", self.clientes))",
        "detail": "sistema_bancario_v3.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_validar_documento",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_validators",
        "description": "sistema_bancario_v3.tests.test_validators",
        "peekOfCode": "def test_validar_documento():\n    assert validar_documento(\"12345678901\") == (True, \"\")\n    assert validar_documento(\"1234567890\") == (False, \"Documento deve ter 11 ou 14 dígitos.\")\n    assert validar_documento(\"12345678901234\") == (False, \"Documento deve ter 11 ou 14 dígitos.\")\n    assert validar_documento(\"\") == (False, \"Documento não pode ser vazio.\")\ndef test_validar_nome():\n    assert validar_nome(\"João da Silva\") == (True, \"\")\n    assert validar_nome(\"\") == (False, \"Nome não pode ser vazio.\")\ndef test_validar_data():\n    assert validar_data(\"01/01/2000\") == (True, \"\")",
        "detail": "sistema_bancario_v3.tests.test_validators",
        "documentation": {}
    },
    {
        "label": "test_validar_nome",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_validators",
        "description": "sistema_bancario_v3.tests.test_validators",
        "peekOfCode": "def test_validar_nome():\n    assert validar_nome(\"João da Silva\") == (True, \"\")\n    assert validar_nome(\"\") == (False, \"Nome não pode ser vazio.\")\ndef test_validar_data():\n    assert validar_data(\"01/01/2000\") == (True, \"\")\n    assert validar_data(\"31/02/2000\") == (False, \"Data inválida.\")\n    assert validar_data(\"\") == (False, \"Data não pode ser vazia.\")\ndef test_validar_endereco():\n    assert validar_endereco(\"Rua das Flores, 123\") == (True, \"\")\n    assert validar_endereco(\"\") == (False, \"Endereço não pode ser vazio.\")",
        "detail": "sistema_bancario_v3.tests.test_validators",
        "documentation": {}
    },
    {
        "label": "test_validar_data",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_validators",
        "description": "sistema_bancario_v3.tests.test_validators",
        "peekOfCode": "def test_validar_data():\n    assert validar_data(\"01/01/2000\") == (True, \"\")\n    assert validar_data(\"31/02/2000\") == (False, \"Data inválida.\")\n    assert validar_data(\"\") == (False, \"Data não pode ser vazia.\")\ndef test_validar_endereco():\n    assert validar_endereco(\"Rua das Flores, 123\") == (True, \"\")\n    assert validar_endereco(\"\") == (False, \"Endereço não pode ser vazio.\")",
        "detail": "sistema_bancario_v3.tests.test_validators",
        "documentation": {}
    },
    {
        "label": "test_validar_endereco",
        "kind": 2,
        "importPath": "sistema_bancario_v3.tests.test_validators",
        "description": "sistema_bancario_v3.tests.test_validators",
        "peekOfCode": "def test_validar_endereco():\n    assert validar_endereco(\"Rua das Flores, 123\") == (True, \"\")\n    assert validar_endereco(\"\") == (False, \"Endereço não pode ser vazio.\")",
        "detail": "sistema_bancario_v3.tests.test_validators",
        "documentation": {}
    },
    {
        "label": "BALANCE",
        "kind": 5,
        "importPath": "sistema_bancario_v1",
        "description": "sistema_bancario_v1",
        "peekOfCode": "BALANCE = 5000.0\nDAILY_LIMIT = 1500.0\nMAX_WITHDRAWALS = 3\nextract: list[dict] = []\nwhile True:\n    option = input(\n        \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n        \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Sair\\n\\n\"\n        \"Digite o número da opção desejada: \"\n    )",
        "detail": "sistema_bancario_v1",
        "documentation": {}
    },
    {
        "label": "DAILY_LIMIT",
        "kind": 5,
        "importPath": "sistema_bancario_v1",
        "description": "sistema_bancario_v1",
        "peekOfCode": "DAILY_LIMIT = 1500.0\nMAX_WITHDRAWALS = 3\nextract: list[dict] = []\nwhile True:\n    option = input(\n        \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n        \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Sair\\n\\n\"\n        \"Digite o número da opção desejada: \"\n    )\n    if option == \"1\":",
        "detail": "sistema_bancario_v1",
        "documentation": {}
    },
    {
        "label": "MAX_WITHDRAWALS",
        "kind": 5,
        "importPath": "sistema_bancario_v1",
        "description": "sistema_bancario_v1",
        "peekOfCode": "MAX_WITHDRAWALS = 3\nextract: list[dict] = []\nwhile True:\n    option = input(\n        \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n        \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Sair\\n\\n\"\n        \"Digite o número da opção desejada: \"\n    )\n    if option == \"1\":\n        value = float(input(\"Digite o valor do saque: R$ \"))",
        "detail": "sistema_bancario_v1",
        "documentation": {}
    },
    {
        "label": "validar_nome",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_nome(nome):\n    if not nome:\n        print(\"\\n\\n❌ O nome não pode ser vazio!\\n\\n\")\n        return False\n    return True\ndef validar_data_nascimento(data_nascimento):\n    if not data_nascimento:\n        print(\"\\n\\n❌ A data de nascimento é obrigatória!\\n\\n\")\n        return False\n    try:",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "validar_data_nascimento",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_data_nascimento(data_nascimento):\n    if not data_nascimento:\n        print(\"\\n\\n❌ A data de nascimento é obrigatória!\\n\\n\")\n        return False\n    try:\n        datetime.strptime(data_nascimento, \"%d/%m/%Y\")\n    except ValueError:\n        print(\n            \"\\n\\n❌ A data de nascimento deve estar no formato dd/mm/aaaa!\\n\\n\"\n        )  # noqa",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "validar_cpf",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_cpf(cpf):\n    if not cpf:\n        print(\"\\n\\n❌ O CPF não pode ser vazio!\\n\\n\")\n        return False\n    if cpf_existe(cpf):\n        print(\"\\n\\n❌ Usuário com este CPF já cadastrado!\\n\\n\")\n        return False\n    return True\ndef validar_endereco(endereco):\n    if not endereco:",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "validar_endereco",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def validar_endereco(endereco):\n    if not endereco:\n        print(\"\\n\\n❌ O endereço não pode ser vazio!\\n\\n\")\n        return False\n    return True\ndef cpf_existe(cpf):\n    return any(usuario[\"cpf\"] == cpf for usuario in usuarios)\ndef obter_dado(campo, validacao):\n    while True:\n        dado = input(f\"Digite o {campo}: \").strip()",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "cpf_existe",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def cpf_existe(cpf):\n    return any(usuario[\"cpf\"] == cpf for usuario in usuarios)\ndef obter_dado(campo, validacao):\n    while True:\n        dado = input(f\"Digite o {campo}: \").strip()\n        if validacao(dado):\n            return dado\ndef verificar_limites_saque(\n    valor, saldo, limite, numero_saques, limite_saques, total_sacado_hoje\n):",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "obter_dado",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def obter_dado(campo, validacao):\n    while True:\n        dado = input(f\"Digite o {campo}: \").strip()\n        if validacao(dado):\n            return dado\ndef verificar_limites_saque(\n    valor, saldo, limite, numero_saques, limite_saques, total_sacado_hoje\n):\n    if numero_saques >= limite_saques:\n        print(\"\\n\\n❌ Limite de 3 saques diários atingido!\\n\\n\")",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "verificar_limites_saque",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def verificar_limites_saque(\n    valor, saldo, limite, numero_saques, limite_saques, total_sacado_hoje\n):\n    if numero_saques >= limite_saques:\n        print(\"\\n\\n❌ Limite de 3 saques diários atingido!\\n\\n\")\n        return False\n    elif valor > saldo:\n        print(\"\\n\\n❌ Saldo insuficiente!\\n\\n\")\n        return False\n    elif total_sacado_hoje + valor > limite:",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "obter_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def obter_conta():\n    agencia = input(\"Digite a agência: \").strip()\n    numero_conta = int(input(\"Digite o número da conta: \").strip())\n    tipo_conta = input(\"Digite o tipo da conta: \").strip()\n    conta = next(\n        (\n            c\n            for c in contas\n            if c[\"agencia\"] == agencia\n            and c[\"numero\"] == numero_conta",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "sacar",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def sacar(conta):\n    valor = float(input(\"Digite o valor do saque: R$ \"))\n    saldo = conta[\"saldo\"]\n    limite = LIMITE_DIARIO_PARA_SAQUE\n    numero_saques = len(\n        [t for t in extrato if t[\"tipo\"] == \"Saque\" and t[\"conta\"] == conta]\n    )\n    limite_saques = MAX_RETIRADAS\n    hoje = datetime.now().date()\n    retiradas_diarias = [",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "depositar",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def depositar(conta):\n    valor = float(input(\"Digite o valor do depósito: R$ \"))\n    conta[\"saldo\"] += valor\n    extrato.append(\n        {\n            \"tipo\": \"Depósito\",\n            \"valor\": valor,\n            \"data\": datetime.now().isoformat(),\n            \"conta\": conta,\n        }",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "mostrar_extrato",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def mostrar_extrato(conta):\n    print(\"\\n📜 Extrato Bancário 📜\\n\")\n    for transacao in extrato:\n        if transacao[\"conta\"] == conta:\n            formatted_date = datetime.fromisoformat(transacao[\"data\"]).strftime(  # noqa\n                \"%d/%m/%Y %H:%M:%S\"\n            )\n            print(\n                f\"{formatted_date} - {transacao['tipo']}: R$ {transacao['valor']:.2f}\"  # noqa\n            )",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "criar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def criar_usuario(cpf=None):\n    while True:\n        if not cpf:\n            cpf = (\n                input(\"Digite o CPF (somente números): \")\n                .replace(\".\", \"\")\n                .replace(\"-\", \"\")\n                .strip()\n            )\n        if not validar_cpf(cpf):",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "listar_usuarios",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def listar_usuarios():\n    if not usuarios:\n        print(\"\\n\\n📭 Nenhum usuário cadastrado!\\n\\n\")\n        return\n    print(\"\\n📋 Lista de Usuários 📋\\n\")\n    for usuario in usuarios:\n        print(f\"Nome: {usuario['nome']}\")\n        print(f\"Data de Nascimento: {usuario['data_nascimento']}\")\n        print(f\"CPF: {usuario['cpf']}\")\n        print(f\"Endereço: {usuario['endereco']}\")",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def editar_usuario():\n    cpf = (\n        input(\"Digite o CPF do usuário a ser editado (somente números): \")\n        .replace(\".\", \"\")\n        .replace(\"-\", \"\")\n        .strip()\n    )\n    usuario = next((u for u in usuarios if u[\"cpf\"] == cpf), None)\n    if not usuario:\n        print(\"\\n\\n❌ Usuário não encontrado!\\n\\n\")",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "criar_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def criar_conta(cpf):\n    global numero_conta_sequencial\n    usuario = next((u for u in usuarios if u[\"cpf\"] == cpf), None)\n    if not usuario:\n        print(\"\\n\\n❌ Usuário não encontrado!\\n\\n\")\n        return\n    tipos_conta_usuario = [\n        conta[\"tipo\"] for conta in contas if conta[\"usuario\"][\"cpf\"] == cpf\n    ]\n    tipos_disponiveis = [",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "listar_contas",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def listar_contas():\n    if not contas:\n        print(\"\\n\\n📭 Nenhuma conta cadastrada!\\n\\n\")\n        return\n    print(\"\\n📋 Lista de Contas 📋\\n\")\n    for conta in contas:\n        print(f\"Tipo: {conta['tipo']}\")\n        print(f\"Agência: {conta['agencia']}\")\n        print(f\"Número: {conta['numero']}\")\n        print(",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "encerrar_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def encerrar_conta():\n    agencia = input(\"Digite a agência: \").strip()\n    numero_conta = int(input(\"Digite o número da conta: \").strip())\n    tipo_conta = input(\"Digite o tipo da conta: \").strip()\n    conta = next(\n        (\n            c\n            for c in contas\n            if c[\"agencia\"] == agencia\n            and c[\"numero\"] == numero_conta",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "menu_principal",
        "kind": 2,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "def menu_principal():\n    while True:\n        option = input(\n            \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n            \"[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Criar Usuário\\n[5] - Editar Usuários\\n\"  # noqa\n            \"[6] - Listar Usuários\\n[7] - Criar Conta\\n[8] - Listar Contas\\n[9] - Encerrar Conta\\n[10] - Sair\\n\\n\"  # noqa\n            \"Digite o número da opção desejada: \"\n        )\n        if option == \"1\":\n            conta = obter_conta()",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "SALDO_INICIAL",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "SALDO_INICIAL = 5000.0\nLIMITE_DIARIO_PARA_SAQUE = 1500.0\nMAX_RETIRADAS = 3\nAGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "LIMITE_DIARIO_PARA_SAQUE",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "LIMITE_DIARIO_PARA_SAQUE = 1500.0\nMAX_RETIRADAS = 3\nAGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "MAX_RETIRADAS",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "MAX_RETIRADAS = 3\nAGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",\n    \"Conta Universitária\",",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "AGENCIA",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "AGENCIA = \"0001\"\nTIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",\n    \"Conta Universitária\",\n]",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "TIPOS_DE_CONTA",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "TIPOS_DE_CONTA = [\n    \"Corrente\",\n    \"Poupança\",\n    \"Conta Salário\",\n    \"Conta de Investimentos\",\n    \"Conta Conjunta\",\n    \"Conta de Menor de Idade\",\n    \"Conta Universitária\",\n]\nextrato: list[dict] = []",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "numero_conta_sequencial",
        "kind": 5,
        "importPath": "sistema_bancario_v2",
        "description": "sistema_bancario_v2",
        "peekOfCode": "numero_conta_sequencial = 1\ndef validar_nome(nome):\n    if not nome:\n        print(\"\\n\\n❌ O nome não pode ser vazio!\\n\\n\")\n        return False\n    return True\ndef validar_data_nascimento(data_nascimento):\n    if not data_nascimento:\n        print(\"\\n\\n❌ A data de nascimento é obrigatória!\\n\\n\")\n        return False",
        "detail": "sistema_bancario_v2",
        "documentation": {}
    },
    {
        "label": "Historico",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class Historico:\n    def __init__(self):\n        self.transacoes = []\n    def adicionar_transacao(self, transacao):\n        self.transacoes.append(transacao)\nclass Transacao(ABC):\n    @abstractmethod\n    def registrar(self, conta):\n        pass\nclass Deposito(Transacao):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "Transacao",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class Transacao(ABC):\n    @abstractmethod\n    def registrar(self, conta):\n        pass\nclass Deposito(Transacao):\n    def __init__(self, valor):\n        self.valor = valor\n    def registrar(self, conta):\n        if conta.depositar(self.valor):\n            data_hora = datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "Deposito",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class Deposito(Transacao):\n    def __init__(self, valor):\n        self.valor = valor\n    def registrar(self, conta):\n        if conta.depositar(self.valor):\n            data_hora = datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n            conta.historico.adicionar_transacao(\n                f\"{data_hora} + R$ {self.valor:.2f}\"\n            )  # noqa\nclass Saque(Transacao):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "Saque",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class Saque(Transacao):\n    def __init__(self, valor):\n        self.valor = valor\n    def registrar(self, conta):\n        if conta.sacar(self.valor):\n            data_hora = datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n            conta.historico.adicionar_transacao(\n                f\"{data_hora} - R$ {self.valor:.2f}\"\n            )  # noqa\nclass Conta(ABC):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "Conta",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class Conta(ABC):\n    ultima_conta_criada = \"000\"\n    contas: List[\"Conta\"] = []\n    def __init__(\n        self,\n        cliente,\n        numero_conta,\n        agencia=\"0001\",\n        historico=None,\n        co_titular=None,  # noqa",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaFactory",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaFactory:\n    @staticmethod\n    def criar_conta(usuarios):\n        documento = ContaFactory._obter_documento_usuario()\n        usuario = encontrar_usuario(usuarios, documento)\n        if not usuario:\n            print(\"\\n 🔔 Usuário não encontrado! Cadastre-o primeiro.\\n\")\n            return\n        tipo_conta = ContaFactory._selecionar_tipo_conta(usuario)\n        co_titular = None",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaCorrente",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaCorrente(Conta):\n    def __init__(\n        self,\n        cliente,\n        numero_conta,\n        agencia=\"0001\",\n        limite=1500,\n        limite_saques=3,  # noqa\n    ):\n        super().__init__(cliente, numero_conta, agencia)",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaPoupanca",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaPoupanca(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\"):\n        super().__init__(cliente, numero_conta, agencia)\n    def deposito_inicial(self):\n        return 50\nclass ContaUniversitaria(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", limite=500):\n        super().__init__(cliente, numero_conta, agencia)\n        self._limite = limite\n    def deposito_inicial(self):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaUniversitaria",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaUniversitaria(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", limite=500):\n        super().__init__(cliente, numero_conta, agencia)\n        self._limite = limite\n    def deposito_inicial(self):\n        return 20\nclass ContaSalario(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\"):\n        super().__init__(cliente, numero_conta, agencia)\n    def deposito_inicial(self):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaSalario",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaSalario(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\"):\n        super().__init__(cliente, numero_conta, agencia)\n    def deposito_inicial(self):\n        return 0\nclass ContaConjunta(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", co_titular=None):\n        super().__init__(cliente, numero_conta, agencia, co_titular=co_titular)\n        self._co_titular = co_titular\n    def deposito_inicial(self):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaConjunta",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaConjunta(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", co_titular=None):\n        super().__init__(cliente, numero_conta, agencia, co_titular=co_titular)\n        self._co_titular = co_titular\n    def deposito_inicial(self):\n        return 100\n    @property\n    def co_titular(self):\n        return self._co_titular\nclass ContaMenorIdade(Conta):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaMenorIdade",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaMenorIdade(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", responsavel=None):\n        super().__init__(cliente, numero_conta, agencia)\n        self._responsavel = responsavel\n    def deposito_inicial(self):\n        return 10\nclass ContaJuridicaCorrente(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", limite=1000):\n        super().__init__(cliente, numero_conta, agencia)\n        self._limite = limite",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaCorrente",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaJuridicaCorrente(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\", limite=1000):\n        super().__init__(cliente, numero_conta, agencia)\n        self._limite = limite\n    def deposito_inicial(self):\n        return 200\nclass ContaJuridicaPoupanca(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\"):\n        super().__init__(cliente, numero_conta, agencia)\n    def deposito_inicial(self):",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "ContaJuridicaPoupanca",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class ContaJuridicaPoupanca(Conta):\n    def __init__(self, cliente, numero_conta, agencia=\"0001\"):\n        super().__init__(cliente, numero_conta, agencia)\n    def deposito_inicial(self):\n        return 150\nclass Cliente:\n    clientes: list[dict] = []\n    def __init__(self, endereco):\n        self._endereco = endereco\n        self._contas = []",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class Cliente:\n    clientes: list[dict] = []\n    def __init__(self, endereco):\n        self._endereco = endereco\n        self._contas = []\n    @classmethod\n    def adicionar_conta(cls, usuario, conta):\n        for cliente in cls.clientes:\n            if cliente.get(\"cpf\") == usuario.get(\"cpf\") or cliente.get(\n                \"cnpj\"",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "PessoaFisica",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class PessoaFisica(Cliente):\n    def __init__(self, cpf, nome, data_nascimento, endereco):\n        super().__init__(endereco)\n        self._cpf = cpf\n        self._nome = nome\n        self._data_nascimento = data_nascimento\n        Cliente.clientes.append(\n            {\n                \"cpf\": cpf,\n                \"nome\": nome,",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "PessoaJuridica",
        "kind": 6,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "class PessoaJuridica(Cliente):\n    def __init__(self, cnpj, nome, data_abertura, endereco):\n        super().__init__(endereco)\n        self._cnpj = cnpj\n        self._nome = nome\n        self._data_abertura = data_abertura\n        Cliente.clientes.append(\n            {\n                \"cnpj\": cnpj,\n                \"nome\": nome,",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "documento_existe",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def documento_existe(documento, clientes):\n    return any(\n        cliente.get(\"cpf\") == documento or cliente.get(\"cnpj\") == documento\n        for cliente in clientes\n    )\ndef validar_documento(documento):\n    if not documento:\n        return False, \"❌ O CPF ou CNPJ é obrigatório!\"\n    if len(documento) < 11:\n        return False, \"❌ CPF inválido!\"",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "validar_documento",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def validar_documento(documento):\n    if not documento:\n        return False, \"❌ O CPF ou CNPJ é obrigatório!\"\n    if len(documento) < 11:\n        return False, \"❌ CPF inválido!\"\n    elif len(documento) > 11 and len(documento) < 14:\n        return False, \"❌ CNPJ inválido!\"\n    return True, \"\"\ndef validar_nome(nome):\n    if not nome:",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "validar_nome",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def validar_nome(nome):\n    if not nome:\n        return False, \"❌ O nome é obrigatório!\"\n    return True, \"\"\ndef validar_data(data):\n    if not data:\n        return False, \"❌ A data é obrigatória!\"\n    try:\n        datetime.strptime(data, \"%d/%m/%Y\")\n    except ValueError:",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "validar_data",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def validar_data(data):\n    if not data:\n        return False, \"❌ A data é obrigatória!\"\n    try:\n        datetime.strptime(data, \"%d/%m/%Y\")\n    except ValueError:\n        return False, \"❌ A data deve estar no formato dd/mm/aaaa!\"\n    return True, \"\"\ndef validar_endereco(endereco):\n    if not endereco:",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "validar_endereco",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def validar_endereco(endereco):\n    if not endereco:\n        return False, \"❌ O endereço é obrigatório!\"\n    return True, \"\"\ndef validar_numero_conta(numero):\n    if not re.match(r\"^\\d{3}/\\d$\", numero):\n        return (\n            False,\n            \"❌ Formato de número de conta inválido! Use o formato xxx/x.\",\n        )  # noqa",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "validar_numero_conta",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def validar_numero_conta(numero):\n    if not re.match(r\"^\\d{3}/\\d$\", numero):\n        return (\n            False,\n            \"❌ Formato de número de conta inválido! Use o formato xxx/x.\",\n        )  # noqa\n    return True, \"\"\ndef obter_documento():\n    documento = input(\n        \"Digite o CPF ou CNPJ do usuário a ser editado (somente números): \"",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "obter_documento",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def obter_documento():\n    documento = input(\n        \"Digite o CPF ou CNPJ do usuário a ser editado (somente números): \"\n    )\n    return documento.replace(\".\", \"\").replace(\"-\", \"\").strip()\ndef encontrar_usuario(usuarios, documento):\n    return next(\n        (\n            u\n            for u in usuarios",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "encontrar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def encontrar_usuario(usuarios, documento):\n    return next(\n        (\n            u\n            for u in usuarios\n            if (\"cpf\" in u and u[\"cpf\"] == documento)\n            or (\"cnpj\" in u and u[\"cnpj\"] == documento)\n        ),  # noqa\n        None,\n    )",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "exibir_dados_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def exibir_dados_usuario(usuario):\n    print(\"\\n📋 Dados Atuais do Usuário 📋\\n\")\n    print(f\"Nome: {usuario['nome']}\")\n    if \"cpf\" in usuario:\n        print(f\"Data de Nascimento: {usuario['data_nascimento']}\")\n        print(f\"CPF: {usuario['cpf']}\")\n    else:\n        print(f\"Data de Abertura: {usuario['data_abertura']}\")\n        print(f\"CNPJ: {usuario['cnpj']}\")\n    print(f\"Endereço: {usuario['endereco']}\\n\")",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "obter_novos_dados",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def obter_novos_dados(usuario):\n    print(\n        \"Digite os novos dados do usuário (deixe em branco para manter o valor atual):\"  # noqa\n    )\n    novo_nome = input(f\"Nome [{usuario['nome']}]: \").strip()\n    data_label = (\n        \"Data de Nascimento\" if \"cpf\" in usuario else \"Data de Abertura\"\n    )  # noqa\n    nova_data = input(\n        f\"{data_label} [{usuario.get('data_nascimento', usuario.get('data_abertura'))}]: \"  # noqa",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "atualizar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def atualizar_usuario(usuario, novo_nome, nova_data, novo_endereco):\n    if novo_nome:\n        usuario[\"nome\"] = novo_nome\n    if nova_data:\n        if \"cpf\" in usuario:\n            usuario[\"data_nascimento\"] = nova_data\n        else:\n            usuario[\"data_abertura\"] = nova_data\n    if novo_endereco:\n        usuario[\"endereco\"] = novo_endereco",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def editar_usuario(usuarios):\n    documento = obter_documento()\n    valido, mensagem = validar_documento(documento)\n    if not valido:\n        print(f\"\\n{mensagem}\\n\")\n        return\n    usuario = encontrar_usuario(usuarios, documento)\n    if not usuario:\n        print(\"\\n\\n❌ Usuário não encontrado!\\n\\n\")\n        return",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "menu_principal",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def menu_principal():\n    usuarios = Cliente.clientes\n    while True:\n        option = input(\n            \"\\nBem-vindo(a) ao Banco Python!\\nEscolha uma opção:\\n\\n\"\n            \"[0] - Saldo\\n[1] - Saque\\n[2] - Depósito\\n[3] - Extrato\\n[4] - Criar Usuário\\n[5] - Editar Usuários\\n\"  # noqa\n            \"[6] - Listar Usuários\\n[7] - Criar Conta\\n[8] - Listar Contas\\n[9] - Encerrar Conta\\n[10] - Sair\\n\\n\"  # noqa\n            \"Digite o número da opção desejada: \"\n        )\n        if option == \"0\":",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "exibir_saldo",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def exibir_saldo():\n    conta = Conta.obter_conta()\n    if conta:\n        conta.exibir_saldo()\ndef realizar_saque():\n    conta = Conta.obter_conta()\n    if conta:\n        valor = float(input(\"Digite o valor do saque: R$ \"))\n        transacao = Saque(valor)\n        transacao.registrar(conta)",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "realizar_saque",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def realizar_saque():\n    conta = Conta.obter_conta()\n    if conta:\n        valor = float(input(\"Digite o valor do saque: R$ \"))\n        transacao = Saque(valor)\n        transacao.registrar(conta)\ndef realizar_deposito():\n    conta = Conta.obter_conta()\n    if conta:\n        valor = float(input(\"Digite o valor do depósito: R$ \"))",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "realizar_deposito",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def realizar_deposito():\n    conta = Conta.obter_conta()\n    if conta:\n        valor = float(input(\"Digite o valor do depósito: R$ \"))\n        transacao = Deposito(valor)\n        transacao.registrar(conta)\ndef exibir_extrato():\n    conta = Conta.obter_conta()\n    if conta:\n        conta.exibir_extrato()",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "exibir_extrato",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def exibir_extrato():\n    conta = Conta.obter_conta()\n    if conta:\n        conta.exibir_extrato()\ndef criar_usuario(usuarios):\n    while True:\n        documento = input(\"Digite o CPF ou CNPJ do usuário: \")\n        valido, mensagem = validar_documento(documento)\n        if not valido:\n            print(f\"\\n{mensagem}\\n\")",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    },
    {
        "label": "criar_usuario",
        "kind": 2,
        "importPath": "sistema_bancario_v3",
        "description": "sistema_bancario_v3",
        "peekOfCode": "def criar_usuario(usuarios):\n    while True:\n        documento = input(\"Digite o CPF ou CNPJ do usuário: \")\n        valido, mensagem = validar_documento(documento)\n        if not valido:\n            print(f\"\\n{mensagem}\\n\")\n            continue\n        break\n    if documento_existe(documento, usuarios):\n        if len(documento) == 11:",
        "detail": "sistema_bancario_v3",
        "documentation": {}
    }
]